<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>153</anchor> <rss>alg-0005.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0005</addr>  <route>alg-0005.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local" fizzyelt="addr">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local" dannypsnl="addr">Lîm Tsú-thuàn</link></contributor></authors> <title>Monoid</title> </frontmatter> <mainmatter><p><link href="https://en.wikipedia.org/wiki/Monoid" type="external">Monoid</link> 是有 identity element 的 <link href="alg-0003.xml" type="local" addr="alg-0003" title="Semigroup">semigroup</link>，其中 identity element <tex>e</tex> 滿足</p><tex display="block">
  e  \bullet  a = a = a  \bullet  e
</tex><p>如果把 id morphism 對應到 <tex>e</tex>，而剩餘的 morphism 對應到每個 monoid 的元素上，那麼只有一個 object 的 <link href="cat-0001.xml" type="local" addr="cat-0001" title="直覺 Category">small category</link> 正好是一個 monoid。</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>154</anchor> <rss>fp-000O.rss.xml</rss> <taxon>Example</taxon> <addr>fp-000O</addr>  <route>fp-000O.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local" fizzyelt="addr">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local" dannypsnl="addr">Lîm Tsú-thuàn</link></author> </authors> <title>函數組合</title> </frontmatter> <mainmatter><p>在禁止 free variable 的 lambda calculus 中，可以將 monoid 用作模型</p><ul><li><tex>e</tex> 就是 <tex>\lambda  x. x</tex></li>
  <li>函數 <tex>f, g</tex> 的組合 <tex>f  \circ  g</tex> 是 <tex>\lambda  x. f (g  \;  x)</tex></li></ul><p>identity law 的檢查比較容易，這裡我們就來看結合律如何運作：</p><tex display="block">\begin {aligned}
  &amp;f  \circ  (g  \circ  h)
   \\ 
  &amp;=  \lambda  x. f ((g  \circ  h)  \;  x)
   \\ 
  &amp;=  \lambda  x. f (( \lambda  x. g (h  \;  x))  \;  x)
   \\ 
  &amp;=  \lambda  x. f (g (h  \;  x))
 \\ 
  &amp;(f  \circ  g)  \circ  h
   \\ 
  &amp;=  \lambda  x. (f  \circ  g)(h  \;  x)
   \\ 
  &amp;=  \lambda  x. ( \lambda  x. f (g  \;  x)) (h  \;  x)
   \\ 
  &amp;=  \lambda  x. f (g (h  \;  x))
 \end {aligned}</tex><p>確實滿足要求。</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>155</anchor> <rss>cs-0001.rss.xml</rss> <taxon>Example</taxon> <addr>cs-0001</addr>  <route>cs-0001.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local" fizzyelt="addr">FizzyElt</link></author> </authors> <title>半自動機</title> </frontmatter> <mainmatter><p>對給定的半自動機可以討論其 <link href="https://planetmath.org/CharacteristicMonoid" type="external">characteristic monoid</link>。一個半自動機是個三元組 <tex>(Q,  \Sigma , T)</tex></p><ul><li><tex>Q</tex> 是一個非空的「狀態集合」</li>
  <li><tex>\Sigma</tex> 是一個「輸入字母表」的非空集合</li>
  <li><tex>T</tex> 是轉移函數</li></ul><p>假設一個 <tex>M(Q,  \Sigma , T)</tex> 集合</p><tex display="block">
  M(Q, \  \Sigma , \  T) =  \{  T_w \  | \  w \in   \Sigma ^*  \} 
</tex><p>集合 <tex>M(Q, \  \Sigma , \  T)</tex> 在<strong>函數複合</strong>下閉合；就是說，對於所有 <tex>v,w  \in   \Sigma ^*</tex> ，有 <tex>T_w  \circ  T_v = T_{vw}</tex> 。它還包含 <tex>T_ \epsilon</tex> ，而這個 <tex>T_ \epsilon</tex> 是個<strong>恆等函數(即 identity function)</strong>。 </p></mainmatter> </tree></mainmatter> <backmatter><contributions/> <context/> <related><tree expanded="false" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>156</anchor> <rss>alg-0003.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0003</addr>  <route>alg-0003.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local" fizzyelt="addr">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local" dannypsnl="addr">Lîm Tsú-thuàn</link></contributor></authors> <title>Semigroup</title> </frontmatter> <mainmatter><p><link href="https://ncatlab.org/nlab/show/semigroup" type="external">Semigroup</link> 是滿足結合律的 <link href="alg-0001.xml" type="local" addr="alg-0001" title="Magma">Magma</link>。結合律是指對所有 semigroup 中的元素 <tex>x,y,z  \in  S</tex>，皆滿足</p><tex display="block">
  x  \bullet  (y  \bullet  z) = (x  \bullet  y)  \bullet  z
</tex><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>157</anchor> <rss>alg-0004.rss.xml</rss> <taxon>Example</taxon> <addr>alg-0004</addr>  <route>alg-0004.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="dannypsnl.xml" type="local" dannypsnl="addr">Lîm Tsú-thuàn</link></author> </authors> <title>不滿足交換律的 semigroup</title> </frontmatter> <mainmatter><p>沿襲 <link href="alg-0002.xml" type="local" addr="alg-0002" title="不是 semigroup 的 magma">Magma 案例</link>的傳統，這裡不舉滿足交換律的 semigroup。在程式語言裡面已經有一個我們很常看到的案例了，也就是字串相接，我們可以著手檢查：</p><ul><li>字串與字串相接還是字串</li>
  <li>字串先接 <tex>x, y</tex> 或 <tex>y, z</tex> 不影響結果</li></ul></mainmatter> </tree></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>158</anchor> <rss>cat-0001.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0001</addr>  <route>cat-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local" dannypsnl="addr">Lîm Tsú-thuàn</link></author> </authors> <title>直覺 Category</title> </frontmatter> <mainmatter><p>
說直覺是因為我們這裡未有完善定義何謂 <link href="set-0001.xml" type="local" addr="set-0001" title="本性類與良性類">class</link> 跟 <link href="set-0001.xml" type="local" addr="set-0001" title="本性類與良性類">set</link>，但是作為入門或是簡要使用的定義「夠好」。
我們說 <tex>\mathcal {C}</tex> 是一個範疇的意思是：

<ol><li>
    有 <tex>Ob( \mathcal {C} )</tex> 物件 <strong>class</strong>，表示範疇中的物件。作為方便的記號，當 <tex>a</tex> 為 <tex>\mathcal {C}</tex> 中一物件，我們記成 <tex>a  \in  Ob( \mathcal {C} )</tex></li>
  <li>
    當有 <tex>a, b  \in  Ob( \mathcal {C} )</tex>，而 <tex>f</tex> 為一 <tex>a</tex> 到 <tex>b</tex> 之態射(morphism) ，記為 <tex>f  \in   \mathcal {C} (a, b)</tex> 或是 <tex>f : a  \to  b</tex>。
    態射可以組合，也就是說當有 <tex>f : a  \to  b</tex> 且 <tex>g : b  \to  c</tex>，存在一個兩個的組合態射 <tex>f  \circ  g</tex>。
    與上面相同，<tex>\mathcal {C} (a, b)</tex> 是一個態射 <strong>class</strong></li>
  <li><tex>id_a \  id_b</tex> 對 <tex>f:a \to  b</tex> 滿足 <tex>f \circ  id_a = f</tex> 跟 <tex>id_b \circ  f = f</tex></li>
  <li><tex>(f \circ  g) \circ  h=f \circ  (g \circ  h)</tex></li></ol>

  要是對每個 <tex>a,b</tex> 之間的全部 morphism <tex>\mathcal {C} (a, b)</tex> 是一個集合，就說範疇 locally small；要是整個範疇中所有的 morphism 是一個集合，那範疇就是 small。
  深入技術細節會讓你更了解為什麼需要定義這麼多東西，但在最開始的時候，只要簡單的相信範疇給定的定義即可。
</p></mainmatter> </tree></related> <backlinks/> <references/></backmatter></tree>