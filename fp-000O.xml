<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>681</anchor> <rss>fp-000O.rss.xml</rss> <taxon>Example</taxon> <addr>fp-000O</addr>  <route>fp-000O.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>函數組合</title> </frontmatter> <mainmatter><p>在禁止 free variable 的 lambda calculus 中，可以將 monoid 用作模型</p><ul><li><tex>e</tex> 就是 <tex>\lambda  x. x</tex></li>
  <li>函數 <tex>f, g</tex> 的組合 <tex>f  \circ  g</tex> 是 <tex>\lambda  x. f (g  \;  x)</tex></li></ul><p>identity law 的檢查比較容易，這裡我們就來看結合律如何運作：</p><tex display="block">\begin {aligned}
  &amp;f  \circ  (g  \circ  h)
   \\ 
  &amp;=  \lambda  x. f ((g  \circ  h)  \;  x)
   \\ 
  &amp;=  \lambda  x. f (( \lambda  x. g (h  \;  x))  \;  x)
   \\ 
  &amp;=  \lambda  x. f (g (h  \;  x))
 \\ 
  &amp;(f  \circ  g)  \circ  h
   \\ 
  &amp;=  \lambda  x. (f  \circ  g)(h  \;  x)
   \\ 
  &amp;=  \lambda  x. ( \lambda  x. f (g  \;  x)) (h  \;  x)
   \\ 
  &amp;=  \lambda  x. f (g (h  \;  x))
 \end {aligned}</tex><p>確實滿足要求。</p></mainmatter> <backmatter><contributions/> <context><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>682</anchor> <rss>alg-0005.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0005</addr>  <route>alg-0005.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Monoid</title> </frontmatter> <mainmatter><p><link href="https://en.wikipedia.org/wiki/Monoid" type="external">Monoid</link> 是有 identity element 的 <link href="alg-0003.xml" type="local" title="Semigroup">semigroup</link>，其中 identity element <tex>e</tex> 滿足</p><tex display="block">
  e  \bullet  a = a = a  \bullet  e
</tex><p>如果把 id morphism 對應到 <tex>e</tex>，而剩餘的 morphism 對應到每個 monoid 的元素上，那麼只有一個 object 的 <link href="cat-0001.xml" type="local" title="直覺 Category">small category</link> 正好是一個 monoid。</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>2</crumb></trail> <anchor>683</anchor> <rss>cs-0001.rss.xml</rss> <taxon>Example</taxon> <addr>cs-0001</addr>  <route>cs-0001.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>半自動機</title> </frontmatter> <mainmatter><p>對給定的半自動機可以討論其 <link href="https://planetmath.org/CharacteristicMonoid" type="external">characteristic monoid</link>。一個半自動機是個三元組 <tex>(Q,  \Sigma , T)</tex></p><ul><li><tex>Q</tex> 是一個非空的「狀態集合」</li>
  <li><tex>\Sigma</tex> 是一個「輸入字母表」的非空集合</li>
  <li><tex>T</tex> 是轉移函數</li></ul><p>假設一個 <tex>M(Q,  \Sigma , T)</tex> 集合</p><tex display="block">
  M(Q, \  \Sigma , \  T) =  \{  T_w \  | \  w \in   \Sigma ^*  \} 
</tex><p>集合 <tex>M(Q, \  \Sigma , \  T)</tex> 在<strong>函數複合</strong>下閉合；就是說，對於所有 <tex>v,w  \in   \Sigma ^*</tex> ，有 <tex>T_w  \circ  T_v = T_{vw}</tex> 。它還包含 <tex>T_ \epsilon</tex> ，而這個 <tex>T_ \epsilon</tex> 是個<strong>恆等函數(即 identity function)</strong>。 </p></mainmatter> </tree></mainmatter> </tree></context> <related/> <backlinks/> <references/></backmatter></tree>