<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>719</anchor> <rss>fp-000P.rss.xml</rss>  <addr>fp-000P</addr>  <route>fp-000P.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>Functor Laws</title> </frontmatter> <mainmatter><p>    Functor class 的實例不能視為範疇論中的 Functor，必須檢查 Functor 的約束才會是真正的 Functor。
</p><tex display="block">fmap \  id = id
 \\ fmap \  (g \circ  f) = fmap \  g  \circ  fmap \  f
</tex></mainmatter> <backmatter><contributions/> <context><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>720</anchor> <rss>fp-000H.rss.xml</rss>  <addr>fp-000H</addr>  <route>fp-000H.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>FP 的 Functor 與範疇論的 Functor 之間的關聯</title> </frontmatter> <mainmatter><p>  即便我們看了<link href="cat-0002.xml" type="local" title="Functor">範疇論</link>跟 FP 語言中的 Functor 定義，但在概念的銜接上仍然有困難，如果你看了 <link href="https://en.wikipedia.org/wiki/Functor_(functional_programming)" type="external">Functor(functional programming) wiki</link> 會發現他是受範疇論啟發的 design pattern。而到底引用了哪些概念，以及與語言能做到什麼程度，並沒有很好的說明。
</p><p>  如果以「Functor 是兩個範疇之間的映射」這個觀點來看程式中的 Functor 似乎有些奇怪，通常我們看到的範例都是舉兩個不同範疇 <tex>C,D</tex>，如果某一程式語言是一個範疇 <tex>C</tex> 的話，那範疇 <tex>D</tex> 就會是另一個語言，雖然我們常常這樣思考，但是我們定義程式裡面的 Functor 時不想弄得太複雜。所以這裡指的都是「 <tex>C</tex> 與 <tex>C</tex> 之間的映射」，也就是 <b>Endofunctor</b> 。你可以在 <link href="https://wiki.haskell.org/Typeclassopedia" type="external">Haskell wiki</link> 以及 fp-ts 作者所寫的 <link href="https://github.com/enricopolanski/functional-programming#a-boundary-that-leads-to-functors" type="external">Introduction to Functional Programming</link> 中找到相關說明。
</p><blockquote>  <p>Technically, these laws make f and fmap together an endofunctor on Hask, the category of Haskell types (ignoring <link href="https://wiki.haskell.org/Bottom" type="external">⊥</link>, which is a party pooper). See <link href="https://en.wikibooks.org/wiki/Haskell/Category_theory" type="external">Wikibook: Category theory</link>.</p></blockquote><blockquote>  <p>    Even though a map between two different programming languages is a fascinating idea, we're more interested in a map where C and D are the same (the TS category). In that case we're talking about <b>endofunctors</b> (from the greek &quot;endo&quot; meaning &quot;inside&quot;, &quot;internal&quot;).
  </p></blockquote><p>  範疇論跟程式語言定義的 Functor 不是完全一樣的概念，因為大部分的語言大部分的語言並不可能寫出<link href="https://ncatlab.org/nlab/show/type+of+propositions" type="external">命題</link>，所以範疇論的限制語言裡不一定有加上，這之間的一些漏洞就會產生對使用者來說可能很奇怪的結果，我們能做的就是將兩者之間重疊的部份做連結。而 Haskell 是透過 <link href="https://wiki.haskell.org/Typeclassopedia" type="external">Typeclass</link> 來做約束，所以在程式語言的語境下所說的 Functor 是指 type class 的定義。另外，我們常說「Maybe 是一個 Functor」 指的是 Maybe 是 Functor class 的一個實例 (Maybe 可替換任何其他 Functor class 實例)。
</p><p>  其他 FP 語言雖然不一定都使用 Typeclass 這個詞，但大多 Functor 的定義都差不多。
</p><block open="open"><headline><b>Haskell</b></headline> <pre>class Functor f where
  fmap :: (a -&gt; b) -&gt; f a -&gt; f b
</pre></block><block open="open"><headline><b>Scala</b></headline> <pre>trait Functor[F[_]] {
  def map[A,B](a: F[A])(f: A =&gt; B): F[B]
}
</pre></block><block open="open"><headline><b>Lean</b></headline> <pre>class Functor (f : Type u → Type v) : Type (max (u+1) v) where
  map : {α β : Type u} → (α → β) → f α → f β
</pre></block><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>1</crumb></trail> <anchor>721</anchor> <rss>fp-000P.rss.xml</rss>  <addr>fp-000P</addr>  <route>fp-000P.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>Functor Laws</title> </frontmatter> <mainmatter><p>    Functor class 的實例不能視為範疇論中的 Functor，必須檢查 Functor 的約束才會是真正的 Functor。
</p><tex display="block">fmap \  id = id
 \\ fmap \  (g \circ  f) = fmap \  g  \circ  fmap \  f
</tex></mainmatter> </tree></mainmatter> </tree></context> <related/> <backlinks/> <references/></backmatter></tree>