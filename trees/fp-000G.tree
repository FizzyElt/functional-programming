\title{實際上的用途}
\author{fizzyelt}
\author{dannypsnl}

\p{
	可以將一個 pure function 應用到容器型別之中。
	單純從容器的角度來看，就像是隱藏了「取出 → 運算 → 放回去」的過程，而根據每個容器用途不同在過程中執行不同操作及判斷。
}

\tex{\usepackage{preamble}}{
  % http://quiver.localhost/?q=WzAsNCxbMCwxLCJGXFw7YSJdLFszLDEsIkZcXDtiIl0sWzEsMCwiYSJdLFsyLDAsImIiXSxbMCwxXSxbMiwzXSxbNSw0LCJcXGJvbGR7bGlmdH0iLDAseyJzaG9ydGVuIjp7InNvdXJjZSI6MjAsInRhcmdldCI6MjB9fV1d
\begin{tikzcd}
	& a & b \\
	{F\;a} &&& {F\;b}
	\arrow[""{name=0, anchor=center, inner sep=0}, from=2-1, to=2-4]
	\arrow[""{name=1, anchor=center, inner sep=0}, from=1-2, to=1-3]
	\arrow["{\bold{lift}}", shorten <=4pt, shorten >=4pt, Rightarrow, from=1, to=0]
\end{tikzcd}
}

\p{
	雖然 polymorphism 的容器解釋非常方便，卻是眾多誤解的根源之一。實際上不能做這麼簡單的解釋，舉例來說我可以定義 #{F(-) = (c \to -)}，於是 #{F(a) \to F(b)} 視同 #{(c \to a) \to (c \to b)}，令 #{g : c \to a, f : a \to b}，#{\lambda c. \lambda g. f(g(c))} 正是一個 functor。
}
