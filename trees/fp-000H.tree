\title{FP 的 Functor 與範疇論的 Functor 之間的關聯}
\author{fizzyelt}
\author{dannypsnl}

\p{
  即便我們看了[範疇論](cat-0002)跟 FP 語言中的 Functor 定義，但在概念的銜接上仍然有困難，如果你看了 [Functor(functional programming) wiki](https://en.wikipedia.org/wiki/Functor_(functional_programming)) 會發現他是受範疇論啟發的 design pattern。而到底引用了哪些概念，以及與語言能做到什麼程度，並沒有很好的說明。
}

\p{
  如果以「Functor 是兩個範疇之間的映射」這個觀點來看程式中的 Functor 似乎有些奇怪，通常我們看到的範例都是舉兩個不同範疇 #{C,D}，如果某一程式語言是一個範疇 #{C} 的話，那範疇 #{D} 就會是另一個語言，但現實我們幾乎不會想這樣做。所以這裡唯一的可能是指「 #{C} 與 #{C} 之間的映射」，也就是 \b{Endofunctor} 。你可以在 [Haskell wiki](https://wiki.haskell.org/Typeclassopedia) 以及 fp-ts 作者所寫的 [Introduction to Functional Programming](https://github.com/enricopolanski/functional-programming#a-boundary-that-leads-to-functors) 中找到相關說明。
}


\blockquote{
  \p{Technically, these laws make f and fmap together an endofunctor on Hask, the category of Haskell types (ignoring [⊥](https://wiki.haskell.org/Bottom), which is a party pooper). See [Wikibook: Category theory](https://en.wikibooks.org/wiki/Haskell/Category_theory).}
}

\blockquote{
  \p{
    Even though a map between two different programming languages is a fascinating idea, we're more interested in a map where C and D are the same (the TS category). In that case we're talking about \b{endofunctors} (from the greek "endo" meaning "inside", "internal").
  }
}

\p{
  範疇論跟程式語言定義的 Functor 不是完全一樣的概念，因為大部分的語言大部分的語言並不可能寫出[命題](https://ncatlab.org/nlab/show/type+of+propositions)，所以範疇論的限制語言裡不一定有加上，這之間的一些漏洞就會產生對使用者來說可能很奇怪的結果，我們能做的就是將兩者之間重疊的部份做連結。而 Haskell 是透過 [Typeclass](https://wiki.haskell.org/Typeclassopedia) 來做約束，所以在程式語言的語境下所說的 Functor 是指 type class 的定義。另外，我們常說「Maybe 是一個 Functor」 指的是 Maybe 是 Functor class 的一個實例 (Maybe 可替換任何其他 Functor class 實例)。
}

\p{
  其他 FP 語言雖然不一定都使用 Typeclass 這個詞，但大多 Functor 的定義都差不多。
}

\p{\b{Haskell}}
\pre{\startverb%
class Functor f where
  fmap :: (a -> b) -> f a -> f b
\stopverb}

\p{\b{Scala}}
\pre{\startverb%
trait Functor[F[_]] {
  def map[A,B](a: F[A])(f: A => B): F[B]
}
\stopverb}

\p{\b{Lean}}
\pre{\startverb%
class Functor (f : Type u → Type v) : Type (max (u+1) v) where
  map : {α β : Type u} → (α → β) → f α → f β
\stopverb}

\transclude{fp-000P}
