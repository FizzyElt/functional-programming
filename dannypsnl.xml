<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>320</anchor> <rss>dannypsnl.rss.xml</rss> <taxon>Person</taxon> <addr>dannypsnl</addr>  <route>dannypsnl.xml</route>   <title>Lîm Tsú-thuàn</title> <meta name="position">Compiler Developer</meta><meta name="external">https://dannypsnl.me</meta></frontmatter> <mainmatter/> <backmatter><contributions><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>321</anchor> <rss>alg-0002.rss.xml</rss> <taxon>Example</taxon> <addr>alg-0002</addr>  <route>alg-0002.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>不是 semigroup 的 magma</title> </frontmatter> <mainmatter>我們很容易造出一堆其實是 semigroup（滿足結合律）的 magma，然後騙自己說這樣就是 magma，但這無助於我們思考結合律的意義。刻意構造一個 magma 會發現這其實沒那麼容易，這裡給出一個是 magma 但不是 semigroup 的案例。
<ol>  <li>    <tex>M</tex> 是整數有序對構成的集合
  </li>  <li>    <tex>\bullet</tex> 在輸入兩對的相接序對有序時直接回傳，在無序時回傳全部元素的總和為唯一元素的有序對
  </li></ol>第二條彎彎繞繞的意思就是 <tex>[1]  \bullet  [2] = [1, 2]</tex>，而 <tex>[2]  \bullet  [1] = [3]</tex>。所以現在可以說結合律對運算 <tex>\bullet</tex> 不成立，因為
<ul>  <li><tex>[0]  \bullet  ([2]  \bullet  [1]) = [0,3]</tex></li>  <li><tex>([0]  \bullet  [2])  \bullet  [1] = [3]</tex></li></ul>也可以看到交換律不成立的例子。
</mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>322</anchor> <rss>alg-0004.rss.xml</rss> <taxon>Example</taxon> <addr>alg-0004</addr>  <route>alg-0004.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>不滿足交換律的 semigroup</title> </frontmatter> <mainmatter>沿襲 <link href="alg-0002.xml" type="local" title="不是 semigroup 的 magma">Magma 案例</link>的傳統，這裡不舉滿足交換律的 semigroup。在程式語言裡面已經有一個我們很常看到的案例了，也就是字串相接，我們可以著手檢查：
<ul>  <li>字串與字串相接還是字串</li>  <li>字串先接 <tex>x, y</tex> 或 <tex>y, z</tex> 不影響結果</li></ul></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>323</anchor> <rss>fp-000O.rss.xml</rss> <taxon>Example</taxon> <addr>fp-000O</addr>  <route>fp-000O.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>函數組合</title> </frontmatter> <mainmatter>在禁止 free variable 的 lambda calculus 中，可以將 monoid 用作模型
<ul>  <li><tex>e</tex> 就是 <tex>\lambda  x. x</tex></li>  <li>函數 <tex>f, g</tex> 的組合 <tex>f  \circ  g</tex> 是 <tex>\lambda  x. f (g  \;  x)</tex></li></ul>identity law 的檢查比較容易，這裡我們就來看結合律如何運作：
<tex display="block">\begin{aligned}   &amp;f  \circ  (g  \circ  h)   \\   &amp;=  \lambda  x. f ((g  \circ  h)  \;  x)   \\   &amp;=  \lambda  x. f (( \lambda  x. g (h  \;  x))  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \\   &amp;(f  \circ  g)  \circ  h
   \\   &amp;=  \lambda  x. (f  \circ  g)(h  \;  x)   \\   &amp;=  \lambda  x. ( \lambda  x. f (g  \;  x)) (h  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \end{aligned}</tex>確實滿足要求。
</mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>324</anchor> <rss>cat-0002.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0002</addr>  <route>cat-0002.xml</route> <date><year>2023</year> <month>9</month> <day>11</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>Functor</title> </frontmatter> <mainmatter><p>  Let <tex>\mathcal{C}   \to   \mathcal{D}</tex> be <link href="cat-0001.xml" type="local" title="直覺 Category">categories</link>. To specify a <em>functor</em> <tex>F</tex> from <tex>\mathcal{C}</tex> to <tex>\mathcal{D}</tex>, denoted <tex>F :  \mathcal{C}   \to   \mathcal{D}</tex>  <ol>    <li>for every object <tex>c  \in  Ob( \mathcal{C} )</tex>, one specifies an object <tex>F(c)  \in  Ob( \mathcal{D} )</tex>;</li>    <li>for every morphism <tex>f : c_1  \to  c_2</tex> in <tex>\mathcal{C}</tex>, one specifies a morphism <tex>F(f) : F(c_1)  \to  F(c_2)</tex> in <tex>\mathcal{D}</tex>.</li>  </ol>  And they must satisfy two properties:
  <ol>    <li>      for every object <tex>c  \in  Ob{ \mathcal{C} }</tex>, we have <tex>F(id_c) = id_{F(c)}</tex>;
    </li>    <li>      for every three objects <tex>c_1, c_2, c_3  \in  Ob( \mathcal{C} )</tex> and two morphisms <tex>f  \in   \mathcal{C} (c_1, c_2)</tex> and <tex>g  \in   \mathcal{C} (c_2, c_3)</tex>, the equation <tex>F(f  \circ  g) = F(f)  \circ  F(g)</tex> holds in <tex>\mathcal{D}</tex>.
    </li>  </ol></p></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>325</anchor> <rss>set-0001.rss.xml</rss>  <addr>set-0001</addr>  <route>set-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>本性類與良性類</title> </frontmatter> <mainmatter><p>  類區分為兩種：一種是可以順利進行類運算的「良性類」，我們把這種「良性類」稱為集合；另一種是要限制運算的「本性類」，對於本性類，類運算並不是都能進行的。
  更多資料可以參照數學導論
</p></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>326</anchor> <rss>cat-0001.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0001</addr>  <route>cat-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>直覺 Category</title> </frontmatter> <mainmatter><p>說直覺是因為我們這裡未有完善定義何謂 <link href="set-0001.xml" type="local" title="本性類與良性類">class</link> 跟 <link href="set-0001.xml" type="local" title="本性類與良性類">set</link>，但是作為入門或是簡要使用的定義「夠好」。
我們說 <tex>\mathcal{C}</tex> 是一個範疇的意思是：
<ol>  <li>    有 <tex>Ob( \mathcal{C} )</tex> 物件 <b>class</b>，表示範疇中的物件。作為方便的記號，當 <tex>a</tex> 為 <tex>\mathcal{C}</tex> 中一物件，我們記成 <tex>a  \in  Ob( \mathcal{C} )</tex>  </li>  <li>    當有 <tex>a, b  \in  Ob( \mathcal{C} )</tex>，而 <tex>f</tex> 為一 <tex>a</tex> 到 <tex>b</tex> 之態射(morphism) ，記為 <tex>f  \in   \mathcal{C} (a, b)</tex> 或是 <tex>f : a  \to  b</tex>。
    態射可以組合，也就是說當有 <tex>f : a  \to  b</tex> 且 <tex>g : b  \to  c</tex>，存在一個兩個的組合態射 <tex>f  \circ  g</tex>。
    與上面相同，<tex>\mathcal{C} (a, b)</tex> 是一個態射 <b>class</b>  </li>  <li>    <tex>id_a \  id_b</tex> 對 <tex>f:a \to  b</tex> 滿足 <tex>f \circ  id_a = f</tex> 跟 <tex>id_b \circ  f = f</tex>  </li>  <li>    <tex>(f \circ  g) \circ  h=f \circ  (g \circ  h)</tex>  </li></ol>  要是對每個 <tex>a,b</tex> 之間的全部 morphism <tex>\mathcal{C} (a, b)</tex> 是一個集合，就說範疇 locally small；要是整個範疇中所有的 morphism 是一個集合，那範疇就是 small。
  深入技術細節會讓你更了解為什麼需要定義這麼多東西，但在最開始的時候，只要簡單的相信範疇給定的定義即可。
</p></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>327</anchor> <rss>fp-000K.rss.xml</rss> <taxon>Definition</taxon> <addr>fp-000K</addr>  <route>fp-000K.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>函數</title> </frontmatter> <mainmatter><p>在數學中，函數是一個集合 (稱為<b>定義域 domain</b>) 到另一個集合 (稱為<b>值域 codomain</b>) 的映射，假設我們有個函數 <tex>f:A  \to  B</tex>，則 <tex>A</tex> (domain) 中每個元素都必須對應到 <tex>B</tex>(codomain) 中的一個元素，能達成 <tex>A  \to  B</tex> 條件的函數總共有 <tex>|B|^{|A|}</tex> 種，我們能實現的是有限的語法能實現的一小部分，而不是所有都實現。</p><p>Typescript</p><pre>// isEven : number -&gt; boolean
function isEven(num: number): boolean {
    return num }
</pre><p>Haskell</p><pre>is_even :: Int -&gt; Bool
is_even n = n `mod` 2 == 0
</pre><p>函數分三種類型，包含 <b>單射 (injection)</b>、<b>滿射 (surjection)</b>、<b>對射 (bijection)</b>。</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>1</crumb></trail> <anchor>328</anchor> <rss>fp-000L.rss.xml</rss>  <addr>fp-000L</addr>  <route>fp-000L.xml</route>   <title>單射 (injection)</title> </frontmatter> <mainmatter><p>假設我們稱一個函數 <tex>f:A  \to  B</tex> 是單射，則 <tex>A</tex> 與 <tex>B</tex> 的元素關係都是一對一的，即</p><tex display="block">\forall  a,b \in  A, \  a \neq  b  \Longrightarrow  f(a) \neq  f(b)</tex><figure>  <img src="images/fp-000L/injection.png"/>  <figcaption>injection</figcaption></figure><p>我們可以從中得知另一個訊息是 <tex>A</tex> 中的元素數量會小於等於 <tex>B</tex> 元素數量，即 <tex>|A| \le  |B|</tex></p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>2</crumb></trail> <anchor>329</anchor> <rss>fp-000M.rss.xml</rss>  <addr>fp-000M</addr>  <route>fp-000M.xml</route>   <title>滿射 (surjection)</title> </frontmatter> <mainmatter><p>我們稱一個函數 <tex>f : A  \to  B</tex> 是滿射，則對於 <tex>B</tex> 中所有的元素，都存在至少一個 <tex>A</tex> 元素與其對應，即</p><tex display="block">\forall  b  \in  B, \  \exist  a  \in  A, \  f(a) = b</tex><figure>  <img src="images/fp-000M/surjection.png"/>  <figcaption>surjection</figcaption></figure><p>我們可以從中得知另一個訊息是 <tex>A</tex> 中的元素數量會大於等於 <tex>B</tex> 元素數量，即 <tex>|A|  \ge  |B|</tex></p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>3</crumb></trail> <anchor>330</anchor> <rss>fp-000N.rss.xml</rss>  <addr>fp-000N</addr>  <route>fp-000N.xml</route>   <title>對射 (bijection)</title> </frontmatter> <mainmatter><p>我們稱一個函數 <tex>f : A  \to  B</tex> 是對射，則該函數同時達成單射與滿射條件，因為同時滿足 <tex>|A| \le  |B|</tex> 跟 <tex>|A| \ge  |B|</tex> 則 <tex>|A| = |B|</tex></p><figure>  <img src="images/fp-000N/bijection.png"/>  <figcaption>bijection</figcaption></figure></mainmatter> </tree></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>331</anchor> <rss>fp-000G.rss.xml</rss>  <addr>fp-000G</addr>  <route>fp-000G.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>實際上的用途</title> </frontmatter> <mainmatter><p>	可以將一個 pure function 應用到容器型別之中。
	單純從容器的角度來看，就像是隱藏了「取出 → 運算 → 放回去」的過程，而根據每個容器用途不同在過程中執行不同操作及判斷。
</p><center><img src="resources/96e989c77602087d8405ded90a554e2a-web.svg"/></center><p>	雖然 polymorphism 的容器解釋非常方便，卻是眾多誤解的根源之一。實際上不能做這麼簡單的解釋，舉例來說我可以定義 <tex>F(-) = (c  \to  -)</tex>，於是 <tex>F(a)  \to  F(b)</tex> 視同 <tex>(c  \to  a)  \to  (c  \to  b)</tex>，令 <tex>g : c  \to  a, f : a  \to  b</tex>，<tex>\lambda  c.  \lambda  g. f(g(c))</tex> 正是一個 functor。
</p></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>332</anchor> <rss>fp-000J.rss.xml</rss> <taxon>Definition</taxon> <addr>fp-000J</addr>  <route>fp-000J.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>純函數 (Pure function)</title> </frontmatter> <mainmatter><p>純函數的意義是我們想讓編譯器可以做公共子常式提取跟幾種循環等最佳化而試圖去探尋的某一類函數，進而是一種有效減輕開發上的心智負擔，是能夠被靈活組合的一類函數。在程式中你可以利用函數做許多事情，不只是單純的運算，還包含了各種值的修改及各種非同步操作，雖然方便但也造成了閱讀及維護上的困難。</p><p>由於上述的最佳化都涉及到複製或是共用函數呼叫，因此可以導出這些函數在系統下的任何情形中對相同輸入都能給出相同的輸出。這個部分讓我們推導出一些性質，比如這類函數絕對不跟其他函數共用任何儲存機制，而是只用參數跟回傳處理讀寫的概念。再來函數不應該有副作用，否則增加或是減少函數呼叫都會導致不同的副作用結果。</p><p>因為程式語言裡面必須面對無法判定任意計算是否停機的關係，所以建模型的時候都會留下一個對應到 <b>undefined</b> (<tex>\bot</tex>) 的位置，這樣的概念叫做 partial function，跟數學上的<link href="fp-000K.xml" type="local" title="函數">全函數</link>有所差異。</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb></trail> <anchor>333</anchor> <rss>fp-000F.rss.xml</rss>  <addr>fp-000F</addr>  <route>fp-000F.xml</route> <date><year>2023</year> <month>10</month> <day>15</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>透過單元測試難易度辨別函式純度</title> </frontmatter> <mainmatter><p>身為一個初學者該如何知道自己的函數有多純？其實在進行單元測試時可以很容易觀察到，以下會有兩點可以注意：</p><ul>    <li>是否依賴外部資源及變數導致你需要使用 mock data？
    <br/>你必須創造一些虛假的上下文才能使你的函數正常運作，代表這函數過度依賴環境，在遷移上相對困難許多。</li>    <li>你的函數執行完是否會導致外部變數被修改？
    <br/>函數應該盡可能減少對外部影響，否則在追蹤錯誤時會變得越來越困難。</li></ul><p>除了函數本身的行為必須正確之外，一個函數無論遷移到何種新環境時都不會改變其行為，也不會對該環境產生任何影響，這個函數才稱得上足夠純。然而，在現實程式中，很難實現所有函數都是純函數的理想情況。我們能做的是盡量減少非純函數，以降低維護成本。</p><p>透過單元測試，不僅可以檢驗你的函數是否如預期執行，還可以讓你重新審視該函數的定位，並且培養撰寫純函數的直覺。</p></mainmatter> </tree></mainmatter> </tree></contributions> <context/> <related/> <backlinks/> <references/></backmatter></tree>