<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>236</anchor> <rss>cat-0001.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0001</addr>  <route>cat-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>直覺 Category</title> </frontmatter> <mainmatter><p>說直覺是因為我們這裡未有完善定義何謂 <link href="set-0001.xml" type="local" title="本性類與良性類">class</link> 跟 <link href="set-0001.xml" type="local" title="本性類與良性類">set</link>，但是作為入門或是簡要使用的定義「夠好」。
我們說 <tex>\mathcal{C}</tex> 是一個範疇的意思是：
<ol>  <li>    有 <tex>Ob( \mathcal{C} )</tex> 物件 <b>class</b>，表示範疇中的物件。作為方便的記號，當 <tex>a</tex> 為 <tex>\mathcal{C}</tex> 中一物件，我們記成 <tex>a  \in  Ob( \mathcal{C} )</tex>  </li>  <li>    當有 <tex>a, b  \in  Ob( \mathcal{C} )</tex>，而 <tex>f</tex> 為一 <tex>a</tex> 到 <tex>b</tex> 之態射(morphism) ，記為 <tex>f  \in   \mathcal{C} (a, b)</tex> 或是 <tex>f : a  \to  b</tex>。
    態射可以組合，也就是說當有 <tex>f : a  \to  b</tex> 且 <tex>g : b  \to  c</tex>，存在一個兩個的組合態射 <tex>f  \circ  g</tex>。
    與上面相同，<tex>\mathcal{C} (a, b)</tex> 是一個態射 <b>class</b>  </li>  <li>    <tex>id_a \  id_b</tex> 對 <tex>f:a \to  b</tex> 滿足 <tex>f \circ  id_a = f</tex> 跟 <tex>id_b \circ  f = f</tex>  </li>  <li>    <tex>(f \circ  g) \circ  h=f \circ  (g \circ  h)</tex>  </li></ol>  要是對每個 <tex>a,b</tex> 之間的全部 morphism <tex>\mathcal{C} (a, b)</tex> 是一個集合，就說範疇 locally small；要是整個範疇中所有的 morphism 是一個集合，那範疇就是 small。
  深入技術細節會讓你更了解為什麼需要定義這麼多東西，但在最開始的時候，只要簡單的相信範疇給定的定義即可。
</p></mainmatter> <backmatter><contributions/> <context><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="true"><frontmatter> <anchor>237</anchor> <rss>index.rss.xml</rss>  <addr>fp-0001</addr>  <route>index.xml</route>  <authors> <contributor><link href="fizzyelt.xml" type="local">FizzyElt</link></contributor><contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>帶你入門 functional programming</title> <meta name="author">false</meta></frontmatter> <mainmatter><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>1</crumb></trail> <anchor>238</anchor> <rss>alg-0001.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0001</addr>  <route>alg-0001.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Magma</title> </frontmatter> <mainmatter><link href="https://ncatlab.org/nlab/show/magma" type="external">Magma</link> 是代數結構的一種，由一個集合與運算子組成 <tex>(M, \  \bullet )</tex>。定義為「對於在集合 <tex>M</tex> 裡所有 <tex>a, \  b</tex>，<tex>a \  \bullet   \  b</tex> 的結果也是集合 <tex>M</tex> 裡的元素」
<tex display="block"> a, \  b  \in  M  \Longrightarrow  a \  \bullet \  b  \in  M
</tex><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>1</crumb> <crumb>1</crumb></trail> <anchor>239</anchor> <rss>alg-0002.rss.xml</rss> <taxon>Example</taxon> <addr>alg-0002</addr>  <route>alg-0002.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>不是 semigroup 的 magma</title> </frontmatter> <mainmatter>我們很容易造出一堆其實是 semigroup（滿足結合律）的 magma，然後騙自己說這樣就是 magma，但這無助於我們思考結合律的意義。刻意構造一個 magma 會發現這其實沒那麼容易，這裡給出一個是 magma 但不是 semigroup 的案例。
<ol>  <li>    <tex>M</tex> 是整數有序對構成的集合
  </li>  <li>    <tex>\bullet</tex> 在輸入兩對的相接序對有序時直接回傳，在無序時回傳全部元素的總和為唯一元素的有序對
  </li></ol>第二條彎彎繞繞的意思就是 <tex>[1]  \bullet  [2] = [1, 2]</tex>，而 <tex>[2]  \bullet  [1] = [3]</tex>。所以現在可以說結合律對運算 <tex>\bullet</tex> 不成立，因為
<ul>  <li><tex>[0]  \bullet  ([2]  \bullet  [1]) = [0,3]</tex></li>  <li><tex>([0]  \bullet  [2])  \bullet  [1] = [3]</tex></li></ul>也可以看到交換律不成立的例子。
</mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>2</crumb></trail> <anchor>240</anchor> <rss>alg-0003.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0003</addr>  <route>alg-0003.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Semigroup</title> </frontmatter> <mainmatter><link href="https://ncatlab.org/nlab/show/semigroup" type="external">Semigroup</link> 是滿足結合律的 <link href="alg-0001.xml" type="local" title="Magma">Magma</link>。結合律是指對所有 semigroup 中的元素 <tex>x,y,z  \in  S</tex>，皆滿足
<tex display="block">  x  \bullet  (y  \bullet  z) = (x  \bullet  y)  \bullet  z
</tex><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>2</crumb> <crumb>1</crumb></trail> <anchor>241</anchor> <rss>alg-0004.rss.xml</rss> <taxon>Example</taxon> <addr>alg-0004</addr>  <route>alg-0004.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>不滿足交換律的 semigroup</title> </frontmatter> <mainmatter>沿襲 <link href="alg-0002.xml" type="local" title="不是 semigroup 的 magma">Magma 案例</link>的傳統，這裡不舉滿足交換律的 semigroup。在程式語言裡面已經有一個我們很常看到的案例了，也就是字串相接，我們可以著手檢查：
<ul>  <li>字串與字串相接還是字串</li>  <li>字串先接 <tex>x, y</tex> 或 <tex>y, z</tex> 不影響結果</li></ul></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>3</crumb></trail> <anchor>242</anchor> <rss>alg-0005.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0005</addr>  <route>alg-0005.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Monoid</title> </frontmatter> <mainmatter><link href="https://en.wikipedia.org/wiki/Monoid" type="external">Monoid</link> 是有 identity element 的 <link href="alg-0003.xml" type="local" title="Semigroup">semigroup</link>，其中 identity element <tex>e</tex> 滿足
<tex display="block">  e  \bullet  a = a = a  \bullet  e
</tex>如果把 id morphism 對應到 <tex>e</tex>，而剩餘的 morphism 對應到每個 monoid 的元素上，那麼只有一個 object 的 <link href="cat-0001.xml" type="local" title="直覺 Category">small category</link> 正好是一個 monoid。
<tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>3</crumb> <crumb>1</crumb></trail> <anchor>243</anchor> <rss>fp-000O.rss.xml</rss> <taxon>Example</taxon> <addr>fp-000O</addr>  <route>fp-000O.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>函數組合</title> </frontmatter> <mainmatter>在禁止 free variable 的 lambda calculus 中，可以將 monoid 用作模型
<ul>  <li><tex>e</tex> 就是 <tex>\lambda  x. x</tex></li>  <li>函數 <tex>f, g</tex> 的組合 <tex>f  \circ  g</tex> 是 <tex>\lambda  x. f (g  \;  x)</tex></li></ul>identity law 的檢查比較容易，這裡我們就來看結合律如何運作：
<tex display="block">\begin{aligned}   &amp;f  \circ  (g  \circ  h)   \\   &amp;=  \lambda  x. f ((g  \circ  h)  \;  x)   \\   &amp;=  \lambda  x. f (( \lambda  x. g (h  \;  x))  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \\   &amp;(f  \circ  g)  \circ  h
   \\   &amp;=  \lambda  x. (f  \circ  g)(h  \;  x)   \\   &amp;=  \lambda  x. ( \lambda  x. f (g  \;  x)) (h  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \end{aligned}</tex>確實滿足要求。
</mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>3</crumb> <crumb>2</crumb></trail> <anchor>244</anchor> <rss>cs-0001.rss.xml</rss> <taxon>Example</taxon> <addr>cs-0001</addr>  <route>cs-0001.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>半自動機</title> </frontmatter> <mainmatter>對給定的半自動機可以討論其 <link href="https://planetmath.org/CharacteristicMonoid" type="external">characteristic monoid</link>。一個半自動機是個三元組 <tex>(Q,  \Sigma , T)</tex><ul>  <li><tex>Q</tex> 是一個非空的「狀態集合」</li>  <li><tex>\Sigma</tex> 是一個「輸入字母表」的非空集合</li>  <li><tex>T</tex> 是轉移函數</li></ul>假設一個 <tex>M(Q,  \Sigma , T)</tex> 集合
<tex display="block">  M(Q, \  \Sigma , \  T) =  \{  T_w \  | \  w \in   \Sigma ^*  \}</tex>集合 <tex>M(Q, \  \Sigma , \  T)</tex> 在<b>函數複合</b>下閉合；就是說，對於所有 <tex>v,w  \in   \Sigma ^*</tex> ，有 <tex>T_w  \circ  T_v = T_{vw}</tex> 。它還包含 <tex>T_ \epsilon</tex> ，而這個 <tex>T_ \epsilon</tex> 是個<b>恆等函數(即 identity function)</b>。 
</mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb></trail> <anchor>245</anchor> <rss>cat-0003.rss.xml</rss>  <addr>cat-0003</addr>  <route>cat-0003.xml</route> <date><year>2023</year> <month>9</month> <day>11</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Functor</title> </frontmatter> <mainmatter><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb> <crumb>1</crumb></trail> <anchor>246</anchor> <rss>cat-0002.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0002</addr>  <route>cat-0002.xml</route> <date><year>2023</year> <month>9</month> <day>11</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>Functor</title> </frontmatter> <mainmatter><p>  Let <tex>\mathcal{C}   \to   \mathcal{D}</tex> be <link href="cat-0001.xml" type="local" title="直覺 Category">categories</link>. To specify a <em>functor</em> <tex>F</tex> from <tex>\mathcal{C}</tex> to <tex>\mathcal{D}</tex>, denoted <tex>F :  \mathcal{C}   \to   \mathcal{D}</tex>  <ol>    <li>for every object <tex>c  \in  Ob( \mathcal{C} )</tex>, one specifies an object <tex>F(c)  \in  Ob( \mathcal{D} )</tex>;</li>    <li>for every morphism <tex>f : c_1  \to  c_2</tex> in <tex>\mathcal{C}</tex>, one specifies a morphism <tex>F(f) : F(c_1)  \to  F(c_2)</tex> in <tex>\mathcal{D}</tex>.</li>  </ol>  And they must satisfy two properties:
  <ol>    <li>      for every object <tex>c  \in  Ob{ \mathcal{C} }</tex>, we have <tex>F(id_c) = id_{F(c)}</tex>;
    </li>    <li>      for every three objects <tex>c_1, c_2, c_3  \in  Ob( \mathcal{C} )</tex> and two morphisms <tex>f  \in   \mathcal{C} (c_1, c_2)</tex> and <tex>g  \in   \mathcal{C} (c_2, c_3)</tex>, the equation <tex>F(f  \circ  g) = F(f)  \circ  F(g)</tex> holds in <tex>\mathcal{D}</tex>.
    </li>  </ol></p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb> <crumb>2</crumb></trail> <anchor>247</anchor> <rss>fp-000G.rss.xml</rss>  <addr>fp-000G</addr>  <route>fp-000G.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>實際上的用途</title> </frontmatter> <mainmatter><p>	可以將一個 pure function 應用到容器型別之中。
	單純從容器的角度來看，就像是隱藏了「取出 → 運算 → 放回去」的過程，而根據每個容器用途不同在過程中執行不同操作及判斷。
</p><center><img src="resources/96e989c77602087d8405ded90a554e2a-web.svg"/></center><p>	雖然 polymorphism 的容器解釋非常方便，卻是眾多誤解的根源之一。實際上不能做這麼簡單的解釋，舉例來說我可以定義 <tex>F(-) = (c  \to  -)</tex>，於是 <tex>F(a)  \to  F(b)</tex> 視同 <tex>(c  \to  a)  \to  (c  \to  b)</tex>，令 <tex>g : c  \to  a, f : a  \to  b</tex>，<tex>\lambda  c.  \lambda  g. f(g(c))</tex> 正是一個 functor。
</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb> <crumb>3</crumb></trail> <anchor>248</anchor> <rss>fp-000H.rss.xml</rss>  <addr>fp-000H</addr>  <route>fp-000H.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>Lean 中的定義</title> </frontmatter> <mainmatter><pre>class Functor (f : Type u → Type v) : Type (max (u+1) v) where
  map : {α β : Type u} → (α → β) → f α → f β
  mapConst : {α β : Type u} → α → f β → f α :=
    Function.comp map (Function.const _)
</pre><link href="https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Functor" type="external">Lean doc: Functor</link></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>4</crumb> <crumb>4</crumb></trail> <anchor>249</anchor> <rss>fp-000I.rss.xml</rss>  <addr>fp-000I</addr>  <route>fp-000I.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>常見的 Functor Type</title> </frontmatter> <mainmatter><ul>  <li>    Maybe / Option
    <ul>      <li>Haskell (Maybe)</li>      <li>Lean (Option)</li>      <li>Rust (Option)</li>    </ul>  </li>  <li>    Either / Result / Except
    <ul>      <li>Haskell (Either)</li>      <li>Result (Rust)</li>      <li>Lean (Except)</li>    </ul>  </li>  <li>    IO
    <ul>      <li>Haskell (IO)</li>      <li>Lean (IO)</li>    </ul>  </li>  <li>    Reader
    待補
  </li>  <li>    Writer
    待補
  </li>  <li>    State
    待補
  </li></ul></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb></trail> <anchor>250</anchor> <rss>fp-0002.rss.xml</rss>  <addr>fp-0002</addr>  <route>fp-0002.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>Data first or Data last?</title> </frontmatter> <mainmatter><p>  data first 跟 data last 區別在於主要被操作的資料是擺在最前面或最後面，而 functional programming 習慣 data last 的方式設計函數，目的是提高函數的可組合性。
</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>1</crumb></trail> <anchor>251</anchor> <rss>fp-0003.rss.xml</rss>  <addr>fp-0003</addr>  <route>fp-0003.xml</route>   <title>一般函數的設計</title> </frontmatter> <mainmatter><p>  在一般情況下我們撰寫一個函數習慣將資料擺在最前面，其他參數擺後面。假設今天我們設計一個 Array <code>map</code> 函數：
</p><pre>function map(data, callback){
  let res = [];

  for(const item of data){
      res.push(callback(item))
  }

  return res
}
</pre><p>我們可以利用 <code>map</code> 它再做出新的函數 <code>double</code>：</p><pre>function double(data) {
  return map(data, (num) =&gt; num * 2);
}
</pre><p>但你慢慢就會發現你每利用 <code>map</code> 做一個新的函數出來，你都要重複做一次傳遞 <code>data</code> 的動作。</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>2</crumb></trail> <anchor>252</anchor> <rss>fp-0004.rss.xml</rss>  <addr>fp-0004</addr>  <route>fp-0004.xml</route>   <title>Data last</title> </frontmatter> <mainmatter><p>今天我們轉成 data last 形式來設計 <code>map</code>：</p><pre>function map(callback, data) {
  let res = [];

  for (const item of data) {
    res.push(callback(item));
  }

  return res;
}
</pre><p>我們再嘗試做一個 <code>double</code>：</p><pre>function double(data) {
  return map((num) =&gt; num * 2, data);
}
</pre><p>你會發現你還是要一直傳遞 <code>data</code> ，這到底有什麼差，但我們忘了一件事情是 FP 通常會將函數做<b>柯里化(curry)</b>。</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>3</crumb></trail> <anchor>253</anchor> <rss>fp-0005.rss.xml</rss>  <addr>fp-0005</addr>  <route>fp-0005.xml</route>   <title>Data last 搭配柯里化</title> </frontmatter> <mainmatter><p>我們將 <code>map</code> 函數做柯里化
</p><pre>function map(callback) {
  return function (data) {
    let res = [];

    for (const item of data) {
      res.push(callback(item));
    }

    return res;
  };
}
</pre>現在做一個 double 函數只需要傳 callback 即可
<pre>map((num) =&gt; num * 2);
</pre></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>4</crumb></trail> <anchor>254</anchor> <rss>fp-0006.rss.xml</rss>  <addr>fp-0006</addr>  <route>fp-0006.xml</route>   <title>利於函式組合</title> </frontmatter> <mainmatter><p>一般我們做函式組合通常是 <tex>f</tex> 函數的輸出對應到 <tex>g</tex> 函數的輸入。</p><tex display="block">  f = a  \to  b, \  g = b  \to  c
</tex><p>  但現實是並不是每個函數的輸入參數都只有一個，我們必須先給一些參數後才能再跟其他函數接在一起。
  而一般情況下組合會是長這樣：
</p><pre>function fn(data) {
  return map(
    map(data, (num) =&gt; num * 2),
    (num) =&gt; num + 1
  );
}
</pre>你每組一個新的函數出來你都得做一次傳遞資料的動作。
<tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>4</crumb> <crumb>1</crumb></trail> <anchor>255</anchor> <rss>fp-0007.rss.xml</rss>  <addr>fp-0007</addr>  <route>fp-0007.xml</route>   <title>利用 compose</title> </frontmatter> <mainmatter>在函數 <b>data last 搭配柯里化</b> 的情況下用 <code>compose</code> 來組合函式會乾淨許多。
<pre>const fn = compose(
  map((num) =&gt; num + 1),
  map((num) =&gt; num * 2)
);
</pre></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>5</crumb></trail> <anchor>256</anchor> <rss>fp-0008.rss.xml</rss>  <addr>fp-0008</addr>  <route>fp-0008.xml</route>   <title>Data first 較優雅的作法</title> </frontmatter> <mainmatter><p>如果不想像一開始那樣一直傳遞 data，但還是想走 data first 形式，有兩種</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>5</crumb> <crumb>1</crumb></trail> <anchor>257</anchor> <rss>fp-0009.rss.xml</rss>  <addr>fp-0009</addr>  <route>fp-0009.xml</route>   <title>Chaining</title> </frontmatter> <mainmatter><p>一種是就是用我們一般 Array methods 的形式串接下去</p><pre>data.map((num) =&gt; num * 2).map((num) =&gt; num + 1);
</pre><p>可以從 <link href="https://lodash.com/docs/#chain" type="external">lodash</link> 找到這種設計方式，但伴隨的缺點是跟其他函式庫沒辦法配合的這麼好。</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>5</crumb> <crumb>2</crumb></trail> <anchor>258</anchor> <rss>fp-000A.rss.xml</rss>  <addr>fp-000A</addr>  <route>fp-000A.xml</route>   <title>略過參數的語法糖</title> </frontmatter> <mainmatter><p>在 Scala 中可以利用 <code>_</code> 來暫時略過參數：</p><pre>List(1, 2, 3, 4).map(_ * 2)
</pre><pre>def multiplier(a: Int, b: Int): Int = a * b

val fourTimes = multiplier(_: Int, 4)

fourTimes(2) // 8
</pre><p>  我們在 <code>ramda</code> 中會看到一個叫做 <link href="https://ramdajs.com/docs/#__" type="external">placeholder function</link> 來模擬類似 Scala 的效果，它可以保留位置來安插後續進來的參數。
假設我們利用 data first 方式設計 <code>map</code> 並做柯里化，使用 <code>__</code> 函數就會是以下這樣：
</p><pre>const fn = compose(
  map(R.__, (num) =&gt; num + 1),
  map(R.__, (num) =&gt; num * 2)
);
</pre></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>6</crumb></trail> <anchor>259</anchor> <rss>fp-000B.rss.xml</rss>  <addr>fp-000B</addr>  <route>fp-000B.xml</route>   <title>參數的順序會影響結果的函數</title> </frontmatter> <mainmatter><p>有些函數的參數資料格式相同，並且擺放順序不同會影響執行結果。</p><ul>  <li><code>&lt;</code> lessThan</li>  <li><code>&lt;=</code> lessThanEqual</li>  <li><code>&gt;</code> greaterThan</li>  <li><code>&gt;=</code> greaterThanEqual</li>  <li><code>concat</code></li></ul><p>  如果是一般的比大小，我們反轉一下邏輯就可以解決(<code>&lt;</code> 改成 <code>&gt;=</code>)，但 <code>concat</code> 就不行
  假設我們的需求是將主流程的資訊接在 <code>arr</code> 的前面，但一般作法似乎會有錯誤：
</p><pre>flow(
  // ...
  concat(arr) // 前一個的結果會被接在 arr 後面
);
</pre><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>6</crumb> <crumb>1</crumb></trail> <anchor>260</anchor> <rss>fp-000C.rss.xml</rss>  <addr>fp-000C</addr>  <route>fp-000C.xml</route>   <title>重新包裝</title> </frontmatter> <mainmatter><p>一種辦法是我們再包裝一個函數，重新將 data 擺在正確位置</p><pre>flow(
  // ...
  (data) =&gt; concat(data, arr) // 多包一層來擺放正確位置
);
</pre></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>6</crumb> <crumb>2</crumb></trail> <anchor>261</anchor> <rss>fp-000D.rss.xml</rss>  <addr>fp-000D</addr>  <route>fp-000D.xml</route>   <title>Flip</title> </frontmatter> <mainmatter><p>flip 函數可以將你的函數的前兩個參數對調</p><pre>flow(
  // ...
  flip(concat)(arr) // 將參數對調
);
</pre><link href="https://ramdajs.com/docs/#flip" type="external">Ramda <code>flip</code></link></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>5</crumb> <crumb>6</crumb> <crumb>3</crumb></trail> <anchor>262</anchor> <rss>fp-000E.rss.xml</rss>  <addr>fp-000E</addr>  <route>fp-000E.xml</route>   <title>Placeholder</title> </frontmatter> <mainmatter><p>也可以利用 placeholder function 來消除不必要的包裝跟邏輯反轉。</p><pre>flow(
  // ...
  R.concat(R.__, arr) // 保留第一個位置給後續進來的資料
);
</pre></mainmatter> </tree></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>6</crumb></trail> <anchor>263</anchor> <rss>fp-000J.rss.xml</rss> <taxon>Definition</taxon> <addr>fp-000J</addr>  <route>fp-000J.xml</route>  <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>純函數 (Pure function)</title> </frontmatter> <mainmatter><p>純函數的意義是我們想讓編譯器可以做公共子常式提取跟幾種循環等最佳化而試圖去探尋的某一類函數，進而是一種有效減輕開發上的心智負擔，是能夠被靈活組合的一類函數。在程式中你可以利用函數做許多事情，不只是單純的運算，還包含了各種值的修改及各種非同步操作，雖然方便但也造成了閱讀及維護上的困難。</p><p>由於上述的最佳化都涉及到複製或是共用函數呼叫，因此可以導出這些函數在系統下的任何情形中對相同輸入都能給出相同的輸出。這個部分讓我們推導出一些性質，比如這類函數絕對不跟其他函數共用任何儲存機制，而是只用參數跟回傳處理讀寫的概念。再來函數不應該有副作用，否則增加或是減少函數呼叫都會導致不同的副作用結果。</p><p>因為程式語言裡面必須面對無法判定任意計算是否停機的關係，所以建模型的時候都會留下一個對應到 <b>undefined</b> (<tex>\bot</tex>) 的位置，這樣的概念叫做 partial function，跟數學上的<link href="fp-000K.xml" type="local" title="函數">全函數</link>有所差異。</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>6</crumb> <crumb>1</crumb></trail> <anchor>264</anchor> <rss>fp-000F.rss.xml</rss>  <addr>fp-000F</addr>  <route>fp-000F.xml</route> <date><year>2023</year> <month>10</month> <day>15</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>透過單元測試難易度辨別函式純度</title> </frontmatter> <mainmatter><p>身為一個初學者該如何知道自己的函數有多純？其實在進行單元測試時可以很容易觀察到，以下會有兩點可以注意：</p><ul>    <li>是否依賴外部資源及變數導致你需要使用 mock data？
    <br/>你必須創造一些虛假的上下文才能使你的函數正常運作，代表這函數過度依賴環境，在遷移上相對困難許多。</li>    <li>你的函數執行完是否會導致外部變數被修改？
    <br/>函數應該盡可能減少對外部影響，否則在追蹤錯誤時會變得越來越困難。</li></ul><p>除了函數本身的行為必須正確之外，一個函數無論遷移到何種新環境時都不會改變其行為，也不會對該環境產生任何影響，這個函數才稱得上足夠純。然而，在現實程式中，很難實現所有函數都是純函數的理想情況。我們能做的是盡量減少非純函數，以降低維護成本。</p><p>透過單元測試，不僅可以檢驗你的函數是否如預期執行，還可以讓你重新審視該函數的定位，並且培養撰寫純函數的直覺。</p></mainmatter> </tree></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>7</crumb></trail> <anchor>265</anchor> <rss>cat-0001.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0001</addr>  <route>cat-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>直覺 Category</title> </frontmatter> <mainmatter><p>說直覺是因為我們這裡未有完善定義何謂 <link href="set-0001.xml" type="local" title="本性類與良性類">class</link> 跟 <link href="set-0001.xml" type="local" title="本性類與良性類">set</link>，但是作為入門或是簡要使用的定義「夠好」。
我們說 <tex>\mathcal{C}</tex> 是一個範疇的意思是：
<ol>  <li>    有 <tex>Ob( \mathcal{C} )</tex> 物件 <b>class</b>，表示範疇中的物件。作為方便的記號，當 <tex>a</tex> 為 <tex>\mathcal{C}</tex> 中一物件，我們記成 <tex>a  \in  Ob( \mathcal{C} )</tex>  </li>  <li>    當有 <tex>a, b  \in  Ob( \mathcal{C} )</tex>，而 <tex>f</tex> 為一 <tex>a</tex> 到 <tex>b</tex> 之態射(morphism) ，記為 <tex>f  \in   \mathcal{C} (a, b)</tex> 或是 <tex>f : a  \to  b</tex>。
    態射可以組合，也就是說當有 <tex>f : a  \to  b</tex> 且 <tex>g : b  \to  c</tex>，存在一個兩個的組合態射 <tex>f  \circ  g</tex>。
    與上面相同，<tex>\mathcal{C} (a, b)</tex> 是一個態射 <b>class</b>  </li>  <li>    <tex>id_a \  id_b</tex> 對 <tex>f:a \to  b</tex> 滿足 <tex>f \circ  id_a = f</tex> 跟 <tex>id_b \circ  f = f</tex>  </li>  <li>    <tex>(f \circ  g) \circ  h=f \circ  (g \circ  h)</tex>  </li></ol>  要是對每個 <tex>a,b</tex> 之間的全部 morphism <tex>\mathcal{C} (a, b)</tex> 是一個集合，就說範疇 locally small；要是整個範疇中所有的 morphism 是一個集合，那範疇就是 small。
  深入技術細節會讓你更了解為什麼需要定義這麼多東西，但在最開始的時候，只要簡單的相信範疇給定的定義即可。
</p></mainmatter> </tree></mainmatter> </tree></context> <related><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>266</anchor> <rss>set-0001.rss.xml</rss>  <addr>set-0001</addr>  <route>set-0001.xml</route> <date><year>2023</year> <month>9</month> <day>9</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>本性類與良性類</title> </frontmatter> <mainmatter><p>  類區分為兩種：一種是可以順利進行類運算的「良性類」，我們把這種「良性類」稱為集合；另一種是要限制運算的「本性類」，對於本性類，類運算並不是都能進行的。
  更多資料可以參照數學導論
</p></mainmatter> </tree></related> <backlinks><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>267</anchor> <rss>alg-0005.rss.xml</rss> <taxon>Definition</taxon> <addr>alg-0005</addr>  <route>alg-0005.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> <contributor><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></contributor></authors> <title>Monoid</title> </frontmatter> <mainmatter><link href="https://en.wikipedia.org/wiki/Monoid" type="external">Monoid</link> 是有 identity element 的 <link href="alg-0003.xml" type="local" title="Semigroup">semigroup</link>，其中 identity element <tex>e</tex> 滿足
<tex display="block">  e  \bullet  a = a = a  \bullet  e
</tex>如果把 id morphism 對應到 <tex>e</tex>，而剩餘的 morphism 對應到每個 monoid 的元素上，那麼只有一個 object 的 <link href="cat-0001.xml" type="local" title="直覺 Category">small category</link> 正好是一個 monoid。
<tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>8</crumb></trail> <anchor>268</anchor> <rss>fp-000O.rss.xml</rss> <taxon>Example</taxon> <addr>fp-000O</addr>  <route>fp-000O.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>函數組合</title> </frontmatter> <mainmatter>在禁止 free variable 的 lambda calculus 中，可以將 monoid 用作模型
<ul>  <li><tex>e</tex> 就是 <tex>\lambda  x. x</tex></li>  <li>函數 <tex>f, g</tex> 的組合 <tex>f  \circ  g</tex> 是 <tex>\lambda  x. f (g  \;  x)</tex></li></ul>identity law 的檢查比較容易，這裡我們就來看結合律如何運作：
<tex display="block">\begin{aligned}   &amp;f  \circ  (g  \circ  h)   \\   &amp;=  \lambda  x. f ((g  \circ  h)  \;  x)   \\   &amp;=  \lambda  x. f (( \lambda  x. g (h  \;  x))  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \\   &amp;(f  \circ  g)  \circ  h
   \\   &amp;=  \lambda  x. (f  \circ  g)(h  \;  x)   \\   &amp;=  \lambda  x. ( \lambda  x. f (g  \;  x)) (h  \;  x)   \\   &amp;=  \lambda  x. f (g (h  \;  x)) \end{aligned}</tex>確實滿足要求。
</mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" root="false"><frontmatter><trail><crumb>9</crumb></trail> <anchor>269</anchor> <rss>cs-0001.rss.xml</rss> <taxon>Example</taxon> <addr>cs-0001</addr>  <route>cs-0001.xml</route> <date><year>2023</year> <month>9</month> <day>13</day></date> <authors><author><link href="fizzyelt.xml" type="local">FizzyElt</link></author> </authors> <title>半自動機</title> </frontmatter> <mainmatter>對給定的半自動機可以討論其 <link href="https://planetmath.org/CharacteristicMonoid" type="external">characteristic monoid</link>。一個半自動機是個三元組 <tex>(Q,  \Sigma , T)</tex><ul>  <li><tex>Q</tex> 是一個非空的「狀態集合」</li>  <li><tex>\Sigma</tex> 是一個「輸入字母表」的非空集合</li>  <li><tex>T</tex> 是轉移函數</li></ul>假設一個 <tex>M(Q,  \Sigma , T)</tex> 集合
<tex display="block">  M(Q, \  \Sigma , \  T) =  \{  T_w \  | \  w \in   \Sigma ^*  \}</tex>集合 <tex>M(Q, \  \Sigma , \  T)</tex> 在<b>函數複合</b>下閉合；就是說，對於所有 <tex>v,w  \in   \Sigma ^*</tex> ，有 <tex>T_w  \circ  T_v = T_{vw}</tex> 。它還包含 <tex>T_ \epsilon</tex> ，而這個 <tex>T_ \epsilon</tex> 是個<b>恆等函數(即 identity function)</b>。 
</mainmatter> </tree></mainmatter> </tree><tree expanded="false" show-heading="true" show-metadata="true" toc="false" root="false"><frontmatter> <anchor>270</anchor> <rss>cat-0002.rss.xml</rss> <taxon>Definition</taxon> <addr>cat-0002</addr>  <route>cat-0002.xml</route> <date><year>2023</year> <month>9</month> <day>11</day></date> <authors><author><link href="dannypsnl.xml" type="local">Lîm Tsú-thuàn</link></author> </authors> <title>Functor</title> </frontmatter> <mainmatter><p>  Let <tex>\mathcal{C}   \to   \mathcal{D}</tex> be <link href="cat-0001.xml" type="local" title="直覺 Category">categories</link>. To specify a <em>functor</em> <tex>F</tex> from <tex>\mathcal{C}</tex> to <tex>\mathcal{D}</tex>, denoted <tex>F :  \mathcal{C}   \to   \mathcal{D}</tex>  <ol>    <li>for every object <tex>c  \in  Ob( \mathcal{C} )</tex>, one specifies an object <tex>F(c)  \in  Ob( \mathcal{D} )</tex>;</li>    <li>for every morphism <tex>f : c_1  \to  c_2</tex> in <tex>\mathcal{C}</tex>, one specifies a morphism <tex>F(f) : F(c_1)  \to  F(c_2)</tex> in <tex>\mathcal{D}</tex>.</li>  </ol>  And they must satisfy two properties:
  <ol>    <li>      for every object <tex>c  \in  Ob{ \mathcal{C} }</tex>, we have <tex>F(id_c) = id_{F(c)}</tex>;
    </li>    <li>      for every three objects <tex>c_1, c_2, c_3  \in  Ob( \mathcal{C} )</tex> and two morphisms <tex>f  \in   \mathcal{C} (c_1, c_2)</tex> and <tex>g  \in   \mathcal{C} (c_2, c_3)</tex>, the equation <tex>F(f  \circ  g) = F(f)  \circ  F(g)</tex> holds in <tex>\mathcal{D}</tex>.
    </li>  </ol></p></mainmatter> </tree></backlinks> <references/></backmatter></tree>